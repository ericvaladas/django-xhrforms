// Generated by CoffeeScript 1.6.3
(function() {
  var displayFormErrors;

  $(function() {
    var form, _i, _len, _ref, _results;
    _ref = $('form[data-xhr]');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      form = _ref[_i];
      _results.push((function() {
        var $form, method, type, url;
        $form = $(form);
        type = $form.data('xhr');
        method = $form.attr('method');
        url = $form.attr('action');
        if (type === 'submit') {
          return $form.on('submit', function(e) {
            var xhr;
            e.preventDefault();
            xhr = $.ajax({
              type: method,
              url: url,
              data: $form.serialize(),
              dataType: 'text'
            });
            return xhr.always(function() {
              if (xhr.status === 200) {
                $form.trigger('success', xhr);
                if ($form.data('xhr-success-url')) {
                  return document.location = $form.data('xhr-success-url');
                } else if ($form.data('xhr-success') === 'refresh') {
                  return document.location = document.location.href;
                } else if ($form.data('xhr-success') === 'alert') {
                  $form.find('.alert-saved').hide();
                  $form.find('[type=submit]').after("                  <div class='alert alert-success alert-saved'>Saved</div>");
                  return setTimeout((function() {
                    return $('.alert-saved').fadeOut();
                  }), 7000);
                } else if ($form.data('xhr-success') === 'modal' && $form.data('xhr-modal')) {
                  return $($form.data('xhr-modal')).modal();
                }
              } else if (xhr.status === 500) {

              } else {
                return displayFormErrors($form, JSON.parse(xhr.responseText), true);
              }
            });
          });
        } else if (type === 'blur') {
          return $form.on('blur', '[name]', function(e) {
            var $field, data, xhr;
            e.preventDefault();
            $field = $(this);
            data = {
              'inline_submit': 'true',
              'fields': {}
            };
            data.fields[$field.attr('name')] = $field.attr('value');
            data = JSON.stringify(data);
            xhr = $.ajax({
              type: method,
              url: url,
              data: data,
              dataType: 'text',
              headers: {
                'X-CSRFToken': $form.find('[name=csrfmiddlewaretoken]').val()
              }
            });
            return xhr.always(function() {
              var $control;
              if (xhr.status === 200) {
                $control = $field.closest('.form-group');
                $control.addClass('has-success');
                $control.find('.help-block:not(.has-error)').show();
                return $control.find('.help-block.has-error').remove();
              } else {
                $field.closest('.form-group').removeClass('has-success');
                return displayFormErrors($form, JSON.parse(xhr.responseText).errors, false);
              }
            });
          });
        }
      })());
    }
    return _results;
  });

  displayFormErrors = function($form, errors, remove) {
    var $control, $field, field, name, _i, _j, _len, _len1, _ref, _ref1;
    $form.find('.alert-error').remove();
    if (errors.hasOwnProperty('__all__')) {
      $form.find('.form-group').first().before("<div class='alert alert-error'>" + errors.__all__ + "</div>");
    }
    _ref = $form.find('[name]');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      $control = $(field).closest('.form-group');
      $control.removeClass('has-error');
      $control.find('.help-block:not(.has-error)').show();
      $control.find('.help-block.has-error').remove();
    }
    _ref1 = $form.find('[name]');
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      field = _ref1[_j];
      $field = $(field);
      name = $field.attr('name');
      $control = $field.closest('.form-group');
      if (errors.hasOwnProperty(name)) {
        $control.removeClass('has-success');
        $control.addClass('has-error');
        $field.removeClass('has-success');
        $field.addClass('has-error');
        $control.find('.help-block:not(.has-error)').hide();
        $control.children('div').append("<span class='help-block has-error'>" + errors[name] + "</span>");
      }
    }
    return $form.find('[type=submit],input.submit').prop('disabled', false);
  };

}).call(this);
